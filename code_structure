

HessianEigen_utils.py:
    mainly defines the function
    top_k_hessian_eigen(model, data_x, data_y, loss_fn, top_k = 100, mode='LA', batch_size=None)
    which allows  us to compute the top or bottom eigenvectors of hessian defined by the model, the data and the loss function

data_augment_cifar10.py:
    defines enlarge_cifar10_dataset(data_x, data_y, n_enlarge=20)
    which returns a

nuts.py:
    mainly defines
    nuts6(f, M, Madapt, theta0, delta=0.6, progress=False, r0_sampler=None)
    which generates M samples given a log probability distribution and its gradient produced by f

BayesAveragedModel.py
    given a model and a set of parameter samples from the posterior of this model, defines a new
    module which returns the average prediction over the models in the parameter set

polynomial_models.py
    defines the general form of polynomial regression models

resnet.py
    defines a family of small resnet models for cifar10

(todo) model_trainer.py
    trains a given model on a given dataset

(todo) train_all_model.py
    uses the model_trainer to train all models that we wwant

(todo) find_all_model_eigenstuff.py
    finds the eigenvalues and vectors of all models we want

(todo) sample_all_models.py
    uses nuts6 to sample from the likelihoods of all models, and saves the BayesAveragedModel for each

(todo) evaluate_all_models.py
    evaluate all models on the validation set

